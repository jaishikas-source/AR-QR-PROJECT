<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AR Video Experience - Glossy Black</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/aframe/1.4.0/aframe.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ar.js/2.2.2/aframe-ar.min.js"></script>
    <style>
        /* General Body Styling - Black Glossy Theme */
        body {
            margin: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #0a0a0a, #2c2c2c); /* Dark gradient for depth */
            color: #e0e0e0; /* Light grey text */
            overflow: hidden; /* Prevent scrollbars */
        }

        /* Glossy Panel Style */
        .glossy-panel {
            background: rgba(255, 255, 255, 0.05); /* Slightly transparent white for gloss */
            border: 1px solid rgba(255, 255, 255, 0.1); /* Subtle border */
            border-radius: 12px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.4); /* Darker shadow for depth */
            backdrop-filter: blur(5px); /* Frosted glass effect */
            -webkit-backdrop-filter: blur(5px); /* For Safari */
            padding: 25px;
            box-sizing: border-box;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.5); /* Text shadow for pop */
        }

        /* Instructions Overlay */
        .instructions {
            position: absolute;
            top: 20px;
            left: 20px;
            z-index: 999;
            width: calc(100% - 40px);
            max-width: 350px;
            color: #f0f0f0;
        }
        .instructions h3 {
            color: #00e676; /* Green accent for headings */
            margin-top: 0;
            border-bottom: 1px solid rgba(0,0,0,0.2);
            padding-bottom: 10px;
        }
        .instructions p {
            line-height: 1.6;
            margin-bottom: 8px;
        }

        /* Marker Area (Guide) */
        .marker-area {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 250px;
            height: 250px;
            border: 3px dashed rgba(255, 255, 255, 0.3); /* Dashed white border */
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            text-align: center;
            background: rgba(0, 0, 0, 0.3); /* Slightly darker background */
            border-radius: 15px;
            color: rgba(255, 255, 255, 0.7);
            font-size: 1.1em;
            font-weight: 500;
        }
        .marker-area p:first-of-type {
            margin-bottom: 5px;
        }

        /* Fallback Video Container */
        .fallback-video {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 90%;
            max-width: 600px;
            display: none; /* Hidden by default */
            flex-direction: column;
            align-items: center;
            justify-content: center;
            gap: 15px;
            color: #f0f0f0;
        }
        .fallback-video h3 {
            color: #00e676;
            margin-top: 0;
        }
        .fallback-video video {
            width: 100%;
            height: auto;
            border-radius: 10px;
            border: 2px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.5);
        }

        /* Buttons - Glossy Green */
        .btn-glossy {
            background: linear-gradient(145deg, #00c853, #009944); /* Green gradient */
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 30px; /* More rounded */
            cursor: pointer;
            font-size: 1em;
            font-weight: bold;
            letter-spacing: 0.5px;
            text-transform: uppercase;
            box-shadow: 0 4px 10px rgba(0, 200, 83, 0.3); /* Green shadow */
            transition: all 0.3s ease;
            outline: none;
        }
        .btn-glossy:hover {
            background: linear-gradient(145deg, #00e676, #00b359); /* Lighter green on hover */
            box-shadow: 0 6px 15px rgba(0, 200, 83, 0.5);
            transform: translateY(-2px);
        }
        .btn-glossy:active {
            transform: translateY(1px);
            box-shadow: 0 2px 5px rgba(0, 200, 83, 0.3);
        }

        /* Ensure AR scene fills the screen */
        a-scene {
            width: 100vw;
            height: 100vh;
            position: fixed;
            top: 0;
            left: 0;
        }

        /* Responsive Adjustments */
        @media (max-width: 600px) {
            .instructions {
                top: 10px;
                left: 10px;
                padding: 15px;
                font-size: 0.9em;
            }
            .marker-area {
                width: 200px;
                height: 200px;
                font-size: 0.9em;
            }
            .fallback-video {
                width: 95%;
            }
            .btn-glossy {
                padding: 12px 25px;
                font-size: 0.9em;
            }
        }
    </style>
</head>
<body>
    <div class="instructions glossy-panel">
        <h3>AR Video Demo</h3>
        <p>1. Allow camera access when prompted.</p>
        <p>2. Point camera at a **Hiro marker** (or any other marker you configure).</p>
        <p>3. Video will appear in AR space.</p>
        <button class="btn-glossy" onclick="startDemo()">Start Demo (Fallback)</button>
    </div>

    <div class="marker-area glossy-panel" id="markerArea">
        <div>
            <p>Point your camera here for AR</p>
            <p>or use the "Start Demo" button.</p>
        </div>
    </div>

    <div class="fallback-video glossy-panel" id="fallbackVideo">
        <h3>Video Playback</h3>
        <video id="demoVideo" controls autoplay muted playsinline>
            <source src="https://drive.google.com/uc?export=download&id=1s_AuQRrqzWmtl3FG7TDYjsO-lB_ZMxe8" type="video/mp4">
            Your browser does not support the video tag.
        </video>
        <button class="btn-glossy" onclick="hideDemo()">Close Video</button>
    </div>

    <a-scene
        embedded
        arjs="sourceType: webcam; debugUIEnabled: false; detectionMode: mono_and_matrix; matrixCodeType: 3x3;"
        vr-mode-ui="enabled: false"
        renderer="logarithmicDepthBuffer: true;"
        id="arScene"
        style="display: none;">

        <a-assets>
            <video id="arVideo"
                    src="https://drive.google.com/uc?export=download&id=1s_AuQRrqzWmtl3FG7TDYjsO-lB_ZMxe8"
                    preload="auto"
                    loop="true"
                    crossorigin="anonymous"
                    playsinline
                    webkit-playsinline
                    muted>
            </video>
        </a-assets>

        <a-marker preset="hiro" id="arMarker">
            <a-plane
                position="0 0.5 0"
                rotation="-90 0 0"
                width="2"
                height="1.5"
                material="src: #arVideo; transparent: true"
                id="videoPlane">
            </a-plane>

            <a-box
                position="0 0.45 -0.05"
                width="2.2"
                height="0.1"
                depth="1.7"
                color="#1a1a1a"
                opacity="0.9"
                roughness="0.5"
                metalness="0.8">
            </a-box>
        </a-marker>

        <a-entity camera></a-entity>
    </a-scene>

    <script>
        let arEnabled = false;
        let arVideoPlaying = false; // Track if AR video has started playing

        // Check if device supports AR
        function checkARSupport() {
            const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
            const hasCamera = navigator.mediaDevices && navigator.mediaDevices.getUserMedia;
            return isMobile && hasCamera;
        }

        // Start AR experience
        function startAR() {
            if (checkARSupport()) {
                document.getElementById('arScene').style.display = 'block';
                document.getElementById('markerArea').style.display = 'none';
                document.querySelector('.instructions').style.display = 'none'; // Hide instructions once AR starts
                arEnabled = true;

                const arVideo = document.getElementById('arVideo');
                const arMarker = document.querySelector('#arMarker');

                arMarker.addEventListener('markerFound', function() {
                    console.log('Marker found!');
                    if (!arVideoPlaying) {
                        arVideo.play().then(() => {
                            arVideoPlaying = true;
                            console.log('AR video playing');
                        }).catch(error => {
                            console.error('Error playing AR video:', error);
                        });
                    }
                });

                arMarker.addEventListener('markerLost', function() {
                    console.log('Marker lost');
                    // Optionally pause or reset video when marker is lost
                    // arVideo.pause();
                    // arVideoPlaying = false;
                    // arVideo.currentTime = 0;
                });
            } else {
                // Fallback for desktop or unsupported devices
                startDemo();
            }
        }

        // Fallback demo function (plays video in a normal overlay)
        function startDemo() {
            document.getElementById('markerArea').style.display = 'none';
            document.getElementById('fallbackVideo').style.display = 'flex';
            document.getElementById('arScene').style.display = 'none';
            document.querySelector('.instructions').style.display = 'none'; // Hide instructions
            const demoVideo = document.getElementById('demoVideo');
            demoVideo.play().catch(error => {
                console.error('Error playing fallback video:', error);
            });
        }

        function hideDemo() {
            document.getElementById('markerArea').style.display = 'flex'; // Show marker area again
            document.getElementById('fallbackVideo').style.display = 'none';
            document.querySelector('.instructions').style.display = 'flex'; // Show instructions again
            const video = document.getElementById('demoVideo');
            video.pause();
            video.currentTime = 0; // Reset video to beginning
        }

        // Auto-start AR when page loads, requesting camera permission first
        window.addEventListener('load', function() {
            setTimeout(() => {
                if (checkARSupport()) {
                    // Ask for camera permission first
                    navigator.mediaDevices.getUserMedia({ video: true })
                        .then(function(stream) {
                            // Stop tracks immediately after getting permission, to not keep camera active unnecessarily
                            stream.getTracks().forEach(track => track.stop());
                            startAR();
                        })
                        .catch(function(err) {
                            console.log('Camera access denied or not available:', err);
                            startDemo(); // Fallback if camera is denied
                        });
                } else {
                    startDemo(); // Fallback for unsupported devices
                }
            }, 1000); // Small delay to ensure A-Frame/AR.js is ready
        });

        // Handle page visibility changes (pause videos when tab is not active)
        document.addEventListener('visibilitychange', function() {
            if (document.hidden) {
                const arVideo = document.getElementById('arVideo');
                const demoVideo = document.getElementById('demoVideo');
                if (arVideo && arVideoPlaying) arVideo.pause(); // Only pause if it was playing in AR
                if (demoVideo) demoVideo.pause();
            } else {
                // When tab becomes visible, attempt to resume if applicable
                // For AR, video will resume on marker detection. For fallback, user needs to click play.
            }
        });

        // Ensure videos play on iOS by handling user gesture (e.g., first click) if necessary
        document.body.addEventListener('click', function() {
            const arVideo = document.getElementById('arVideo');
            const demoVideo = document.getElementById('demoVideo');
            if (arVideo && arVideo.paused && arEnabled) {
                arVideo.play().then(() => arVideoPlaying = true).catch(e => console.error("AR video play error on click:", e));
            }
            if (demoVideo && demoVideo.paused && document.getElementById('fallbackVideo').style.display === 'flex') {
                demoVideo.play().catch(e => console.error("Fallback video play error on click:", e));
            }
        }, { once: true }); // Only run this once
    </script>
</body>
</html>